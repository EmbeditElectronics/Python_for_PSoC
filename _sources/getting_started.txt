.. _getting-started-label:

Getting Started
===============
Here is everything you should need to get yourself moving with development on the PiSoC through the Raspberry Pi! 

.. _getting-started-pisoc:

Using the PiSoC
++++++++++++++++
If you're new to the PiSoC, it would greatly benefit you to read through `its documentation <https://github.com/EmbeditElectronics/PiSoC_Bootloader/blob/master/PiSoC_RevC_User_Guide.pdf>`_ before going any further.

:Note:

	Pay special attention to the sections discussing how to download a program to the board using the Bootloader Host Tool. However, if you do not intend to make modifications to the API, you do not need to reprogram the device. 


Program your PiSoC
+++++++++++++++++++
Once you know how to program the PiSoC, if you need to redownload the API, or if you intend to make firmware changes (as required for :ref:`getting-started-mods`) 
Just `download the PSoC Creator project from git <https://github.com/EmbeditElectronics/psoc_2_pi/tree/master/PSoC%20Creator>`_, make your changes if desired, and download it to the PiSoC using the Bootloader host tool.

.. _getting-started-rpi:

Using the PiSoC with the Raspberry Pi
++++++++++++++++++++++++++++++++++++++
The following is necessary set up the PiSoC in the Raspberry Pi environment. First, it is suggested that you update and upgrade your package repository/installed packages, especially if you are starting from a freshly downloaded image::

	sudo apt-get update
	sudo apt-get upgrade

.. _getting-started-source:

Download the Python source
--------------------------
This can be achieved using the source hosted on our github, or by using the simplified pip process. Note that you should download the github content anyway if you intend to try the example projects

Installation using pip
**********************
Installing packages using pip is a convenient way to manage package updates, so this is the suggested method. But, you should still download the github content without installing it if you intend to make use of the examples. 
First, make sure that pip is installed. From the terminal window::

	sudo apt-get install python-setuptools
	sudo easy_install pip

Then, simply install the pisoc source using pip::

	sudo pip install pisoc
	
Installation using Git
**********************
First, be sure that you have git installed on your Raspberry Pi. From the Terminal window::

	sudo apt-get install git-core
	
Then clone our git repo to the directory of your choice::

	git clone git://github.com/EmbeditElectronics/psoc_2_pi.git

Navigate to the Python folder and install the source::
	
	cd API_Python
	sudo python setup.py install

.. _getting-started-uart:

Configure UART
--------------
UART is the easiest protocol to get started with because all necessary packages should already be preinstalled. Unfortunately, the Raspberry Pi 3 made some changes to the UART which is mapped to the GPIO pins when Bluetooth was introduced, and so using it on the Pi3 reliably would require disabling bluetooth and adding some device tree overlays, which is no fun. So for the Pi3, the suggestion is to skip to :ref:`getting-started-i2c` instead.

But for the Pi 1/2 users, all that must be done is enable serial through raspi-config::

	sudo raspi-config

Advanced Options>Serial>No

Exit, and reboot. Done!

.. _getting-started-i2c:

Configure I2C and download smbus
--------------------------------
I2C can be used to communicate between the RPi and the PiSoC on any version of the Raspberry Pi (including Pi3).

To use it though, you will need to configure your i2c bus. This can easily be done through raspi-config::

	sudo raspi-config

Advanced Options>I2C>Yes>Yes

Exit, reboot.

Now, you simply need to install the necessary i2c packages::

	sudo apt-get install i2c-tools
	sudo apt-get install python-smbus

Test that I2C is working with::

	i2cdetect -y 1

You should see that the address 0x07 appears, which is the PiSoC.

.. _getting-started-computer:

Using the PiSoC with your computer!
++++++++++++++++++++++++++++++++++++
To use the PiSoC on your PC, you will need to have the PiSoC device driver installer, you will need python 2.7 installed, your system will need to have python added to its environmental variables, and you will need to download a couple of Python packages, specifically pyserial and the pisoc package.

:Note:

	This has only been tested for Windows 7, Windows 8, and Ubuntu. Theoretically everything should work on OS X, but this has not yet been tested and there are no installation instructions

Windows Installation
--------------------
This will cover installation procedures for Windows 7 and Windows 8

Installing the PiSoC device driver
***********************************
The details of this step will depend on your Operating System. The driver which ultimately must be installed is `this one <https://github.com/EmbeditElectronics/psoc_2_pi/blob/master/PSoC%20Creator/USBUART_cdc.inf>`_

:Windows 7:

	When you connect your PiSoC to a USB port on your PC, it will try to find a driver to install. Of course, it will fail because you need to manually provide it the driver.
		
	- Open your Device Manager
	- In "Other Devices" you should see *PiSoC* with an exclamation sign next to it, indicating that it is an unknown device
	- Right click on *PiSoC* and choose **Properties**
	- On the *General* tab, there should be an option for **Update Driver...** If this option is not available, disconnect and reconnect the device.
	- Click **Update Driver...**
	- Choose **Browse my computer for driver software**
	- Now, simply provide the address bar with the folder that contains the driver linked above
	- If the driver cannot be found, make sure that the driver is saved as a .inf
	- Once the driver is found, it might warn you that the driver cannot be verified. Simply choose to install the driver anyway if this happens
	
	
:Windows 8:

	The process should be the same as above, except you might have a problem if the driver isn't being recognized correctly as signed. If this happens, simply disable driver signature verification so that you are able to install unsigned drivers. This will require a couple of restarts. A good guide on this procedure is shown `in this SparkFun tutorial <https://learn.sparkfun.com/tutorials/disabling-driver-signature-on-windows-8/disabling-signed-driver-enforcement-on-windows-8>`_

With the driver successfully installed on your system as *Cypress USB UART* you can move onto the next step

Installing Python
*****************
On OS X and Linux, Python comes preinstalled. For Windows it does not, and so it must be downloaded and installed. 

- Navigate to the `release page for Python 2.7.8 <https://www.python.org/download/releases/2.7.8/>`_ and scroll down to the **Download** section
- Choose the appropriate installer for your Operating system. 
	* For 32 bit Windows systems choose *Windows x86 MSI Installer (2.7.8)*
	* For 64 bit Windows systems choose *Windows X86-64 MSI Installer (2.7.8)*
- During installation, make sure Python is installed to :code:`C:\Python27`

Edit Windows path variables to include Python
*********************************************
This step will allow you to call python and any packages you might have installed without having to explicitly provide their paths.  This process will be slightly different between Windows 7 and 8

:Windows 7:

	- Right click on **Computer** and select **Properties**
	
:Windows 8:

	- Press **Windows key + C** to bring up your charms panel. 
	- Navigate to *Settings* and then *Control Panel*
	- Then, select *Systems and Security* then *System*
	
From here, the steps are identical.

- To the left, there will be a toolbar called *Control Panel Home*
	* In this toolbar, select **Advanced system settings**
- In the *Advanced* tab, select **Environmental Variables...**
- In the console window on the bottom, labeled *System variables*, scroll to the variable **PATH** and select **Edit**
- In the *Variable value* window, scroll to the very end and enter the following text exactly :code:`;C:\Python27;C:\Python27\Scripts`

To test this, restart your computer, then open the windows command prompt, and type :code:`python`. If everything so far has been successful, this will launch the python interpreter in your console window.

Install required packages
*************************
For your PC, there is only one third party package apart from our own that is required- pyserial. You must install this and the pisoc package to use the API.

The installer for each package can be found on our respective PyPi pages.

:PySerial:

	- `pyserial PyPi page <https://pypi.python.org/pypi/pyserial>`_
	- From that page, download and run *pyserial-2.7.win32.exe (md5)*
	- Run the .exe when it finishes downloading and follow the on-screen instructions to install pyserial
	
:PiSoC:

	- `pisoc PyPi page <https://pypi.python.org/pypi/PiSoC>`_
	- From that page, download and run *PiSoC-1.2.5.win32.exe (md5)* if you are using the 32-bit Python installation, or *PiSoC-1.2.5.win-amd64.exe (md5)* if you are using the 64-bit installation
	- Run the .exe when it finishes downloading and follow the on-screen instructions to install the pisoc package

:Note:
	
	If in either case there is a problem with the installer (such as it being unable to locate your python installation), use pip to install the packages instead. 
	To install the packages using pip, open the command prompt and enter the following commands::
		
		easy_install pip
		pip install pyserial
		pip install pisoc
		
Linux Installation
------------------
Since the Raspberry Pi itself runs a Linux distribution, the installation process should be identical. Refer to :ref:`getting-started-source` for instructions.
	




	
	
		