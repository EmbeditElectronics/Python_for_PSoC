#!/usr/bin/python
#-*- coding: utf-8

from rpisoc import *
from time import sleep

class ADC:

    def __init__(self, c_type):

        self.type = c_type

        if self.type == 'DELSIG':
            self.address = RPiSoC.DELSIG_ADC_CONTROL
        elif self.type == 'SAR0':
            self.address = RPiSoC.SAR_ADC0_CONTROL
        elif self.type == 'SAR1':
            self.address = RPiSoC.SAR_ADC1_CONTROL
        else:
            raise ValueError('Invalid ADC type: Choose "DELSIG" "SAR0" or "SAR1"')
        self.polarity = 1

    def Start(self):
        cmd = 0x00
        data = (self.address, cmd)
        RPiSoC.commChannel.sendData(data)

    def Stop(self):
        cmd = 0x01
        data = (self.address, cmd)
        RPiSoC.commChannel.sendData(data)

    def SetBufferGain(self, gain):

        if self.type != 'DELSIG':
            raise ValueError('Setting Buffer Gain only supported by DELSIG ADC')

        cmd = 0x02

        if gain not in [1,2,4,8]:
            raise ValueError('Invalid Gain Value for DELSIG ADC: Accepts 1, 2, 4, or 8')

        data = (self.address, cmd, gain)
        RPiSoC.commChannel.sendData(data)

    def StartConvert(self):
        if self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x04

        RPiSoC.commChannel.sendData((self.address, cmd)
)
    def StopConvert(self):
        if self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x05
        RPiSoC.commChannel.sendData((self.address,cmd))

    def Read(self):
        if self.type == 'DELSIG':
            cmd = 0x0D
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x0A

        counts = RPiSoC.commChannel.receiveData((self.address, cmd))
        
        if counts<0:
            self.polarity = -1
        else:
            self.polarity = 1
        
        return counts

    def IsEndConversion(self):
        if self.type == 'DELSIG':
            cmd = 0x07
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x08

        return RPiSoC.commChannel.receiveData((self.address,cmd))

    def SetOffset(self, offset):
        if self.type == 'DELSIG':
            cmd = 0x0E
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x0B

        RPiSoC.commChannel.sendData((self.address,cmd, offset))

    def SetGain(self, gain):
        if self.type == 'DELSIG':
            cmd = 0x0F
        elif self.type == "SAR0" or self.type == "SAR1":
            gain*=10 #SAR takes gain in counts per 10 volts
            cmd = 0x0C

        RPiSoC.commChannel.sendData((self.address,cmd, gain))

    def CountsTo_Volts(self, counts):#doesnt work because psoc returns float
        if self.type == 'DELSIG':
            cmd = 0x11
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x0E
         
        counts*=self.polarity
        counts = int(counts)
        return self.polarity*(float(((RPiSoC.commChannel.receiveData((self.address,cmd, counts)))/1000.0)))

    def Sleep(self):
        if self.type == 'DELSIG':
            cmd = 0x14
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x10

        RPiSoC.commChannel.sendData((self.address,cmd))

    def Wakeup(self):
        if self.type == 'DELSIG':
            cmd = 0x15
        elif self.type == "SAR0" or self.type == "SAR1":
            cmd = 0x11

        RPiSoC.commChannel.sendData((self.address,cmd))

class IDAC:
    def __init__(self, channel):

        self.channel = channel

        if self.channel == 0:
            self.address = RPiSoC.IDAC0_CONTROL
       	elif self.channel == 1:
            self.address = RPiSoC.IDAC1_CONTROL
        else:
            raise ValueError('Invalid channel: Only two IDACs available; choose 0 or 1.')

    def Start(self):
        cmd = 0x00
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Stop(self):
        cmd = 0x01
        RPiSoC.commChannel.sendData((self.address, cmd))

    def SetSpeed(self,speed):
        cmd = 0x02
        if speed =='LOW':
            val = 0
        elif speed =='HIGH':
            val = 1
        else:
            raise ValueError('Invalid Speed: Input "High" or "Low"')

        RPiSoC.commChannel.sendData((self.address, cmd, val))

    def SetPolarity(self,polarity):
        cmd = 0x03
        if polarity =='SOURCE':
            val = 0
        elif polarity =='SINK':
            val = 1
        else:
            raise ValueError('Invalid Polarity: Input "SOURCE" or "SINK"')

        RPiSoC.commChannel.sendData((self.address, cmd, val))


    def SetRange(self, mode):

        cmd = 0x04
        if mode not in range(2):
            raise ValueError('Invalid Mode Specified:\n"0" for 32μA range\n"1" for 255μA range\n"2" for 2mA range ')
        else:
            RPiSoC.commChannel.sendData((self.address, cmd, mode))


    def SetValue(self, value):

        cmd = 0x05
        if value not in range(255):
            raise ValueError('Invalid IDAC Value: Input integer values between 0(min) and 255(max)')

        RPiSoC.commChannel.sendData((self.address, cmd, value))

    def Sleep(self):
        cmd = 0x06
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Wakeup(self):
        cmd = 0x07
        RPiSoC.commChannel.sendData((self.address, cmd))

class VDAC:
    def __init__(self, channel):

        self.channel = channel

        if self.channel == 0:
            self.address = RPiSoC.VDAC0_CONTROL
        elif self.channel == 1:
            self.address = RPiSoC.VDAC1_CONTROL
        else:
            raise ValueError('Invalid channel: Only two VDACs available; choose 0 or 1')

    def Start(self):
        cmd = 0x00
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Stop(self):
        cmd = 0x01
        RPiSoC.commChannel.sendData((self.address, cmd))

    def SetSpeed(self,speed):
        cmd = 0x02
        if speed =='LOW':
            val = 0
        elif speed =='HIGH':
            val = 1
        else:
            raise ValueError('Invalid Speed: Input "High" or "Low"')

        RPiSoC.commChannel.sendData((self.address, cmd, val))

    def SetRange(self,Range):
        cmd = 0x03
        if Range =='LOW': #Range of 1.020 V
            val = 0
        elif Range =='HIGH': #Range of 4V
            val = 1
        else:
            raise ValueError('Invalid Range: Input "HIGH" for 4.080V range or "LOW" for 1.020V range')

        RPiSoC.commChannel.sendData((self.address, cmd, val))

    def SetValue(self, value):
        ''' Set the output value between 0(lowest) and 255(highest)'''
        cmd = 0x04
        if value not in range(255):
            raise ValueError('Invalid VDAC Value: Input values between 0(min) and 255(max)')

        RPiSoC.commChannel.sendData((self.address, cmd, value))


    def Sleep(self):
        cmd = 0x05
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Wakeup(self):
        cmd = 0x06
        RPiSoC.commChannel.sendData((self.address, cmd))

class waveDAC(object):
    '''This class represents a waveDAC component on the PSoC.'''

    def __init__(self):

        self.frequency = 240000
        self.divider_value = 100
        self.amplitude = 255
        self.dcBias = 0
        self.waveType = 'SINE'
        self.address = RPiSoC.WAVEDAC_CONTROL

    def Start(self):
        cmd = 0x00
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Stop(self):
        cmd = 0x01
        RPiSoC.commChannel.sendData((self.address, cmd))

    def SetSpeed(self, speed):
        cmd = 0x07

        if speed == 'HIGH':
            val = 1
        elif speed == 'LOW':
            val = 0
        else:
            raise ValueError('Invalid Speed: Choose "HIGH" or "LOW"')


        RPiSoC.commChannel.sendData((self.address, cmd, val))

    def Generate_Wave(self, waveType):

        cmd = 0x04
        self.waveType = waveType

        if waveType == 'SINE':
            val = 0x01
        elif waveType =='SQUARE':
            val = 0x03
        elif waveType == 'TRIANGLE':
            val = 0x05
        elif waveType == 'SAWTOOTH':
            val = 0x07
        else:
            raise ValueError('Invalid waveType: Choose "SINE" "SQUARE" "TRIANGLE" or "SAWTOOTH" ')

        RPiSoC.commChannel.sendData((self.address, cmd))
        time.sleep(0.2)
        RPiSoC.commChannel.sendData((val, self.amplitude, self.dcBias))


    def SetValue(self, val):
        cmd = 0x09
        if val not in range(255):
            raise ValueError('Invalid WaveDAC Value: Input integer between 0(min) and 255(max)')
        else:
            RPiSoC.commChannel.sendData((self.address,cmd,val))

    def Sleep(self):
        cmd = 0x0B
        RPiSoC.commChannel.sendData((self.address, cmd))

    def Wakeup(self):
        cmd = 0x0C
        RPiSoC.commChannel.sendData((self.address, cmd))


    def SetFrequency(self, frequency):
        #Frequency = (3 MHZ/Divider Value)/256
        #Divider Value = 3000000/(256*Desired_frequency)
        
        cmd = 0xFF
        self.frequency = frequency
        
        mstr_clk = 250000
        clk_div_default = 12
    #divider_value = int(round(3000000/(255.0*frequency)))# Test this
        if frequency > 0:
            divider_base = int(float((mstr_clk/clk_div_default)/frequency))
        else:
            raise ValueError('Frequency cannot be zero')

        if divider_base<=1:
            divider_value = clk_div_default
        else:
            divider_value = divider_base*clk_div_default
        
       # clk_default = 250000
       # if frequency>clk_default:
       #     frequency = clk_default
       # divider_value = int(float(clk_default/frequency))
        RPiSoC.commChannel.sendData((self.address, cmd, divider_value))


    def setAmplitude(self, amplitude):
        cmd = 0xFE
    #self.amplitude = amplitude
    # amplitude is between 0 - 4 so valid increments of .15625

        self.amplitude = int(255/4.0*float(amplitude))
    #RPiSoC.commChannel.sendData(self.address, cmd, amp)
        #self.Generate_Wave(self.waveType)

    def setdcBias(self, dcBias):
        cmd = 0xFD

    #dc bias is treated similarly to amplitude. Valid increments of .15625

        self.dcBias = int(255/4.0*float(dcBias))
        #self.Generate_Wave(self.waveType)
    #RPiSoC.commChannel.sendData(self.address, cmd, dcB)

